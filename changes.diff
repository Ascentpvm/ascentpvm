diff --git a/apps/web/app/api/check-auto-rank/route.ts b/apps/web/app/api/check-auto-rank/route.ts
index df34a54a..8d94e55c 100644
--- a/apps/web/app/api/check-auto-rank/route.ts
+++ b/apps/web/app/api/check-auto-rank/route.ts
@@ -39,7 +39,6 @@ import { calculateMaxCapePoints } from '@/app/rank-calculator/utils/calculators/
 import { calculateTzhaarCapePoints } from '@/app/rank-calculator/utils/calculators/calculate-tzhaar-cape-points';
 import { calculateBloodTorvaPoints } from '@/app/rank-calculator/utils/calculators/calculate-blood-torva-points';
 import { calculateDizanasQuiverPoints } from '@/app/rank-calculator/utils/calculators/calculate-dizanas-quiver-points';
-import { itemList } from '@/data/item-list';
 
 export async function GET(request: NextRequest) {
   try {
@@ -87,10 +86,8 @@ export async function GET(request: NextRequest) {
       return NextResponse.json({ success: true });
     }
 
-    const dropRates = await fetchItemDropRates(generateRequiredItemList());
-    const items = Object.entries(
-      await buildNotableItemList(itemList, dropRates),
-    );
+    const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
+    const items = Object.entries(await buildNotableItemList(dropRates));
     const scaling = calculateScaling(joinDate);
     const collectionLogSlotPoints = calculateCollectionLogSlotPoints(
       collectionLogCount,
diff --git a/apps/web/app/rank-calculator/[player]/actions/publish-rank-submission-action.ts b/apps/web/app/rank-calculator/[player]/actions/publish-rank-submission-action.ts
index 4424e307..abb780bd 100644
--- a/apps/web/app/rank-calculator/[player]/actions/publish-rank-submission-action.ts
+++ b/apps/web/app/rank-calculator/[player]/actions/publish-rank-submission-action.ts
@@ -26,7 +26,7 @@ import { ChannelType, Routes } from 'discord-api-types/v10';
 import { Rank } from '@/config/enums';
 import { PlayerName } from '@/app/schemas/player';
 import { ActionError } from '@/app/action-error';
-import { pickBy } from 'lodash';
+import { isEmpty, pickBy } from 'lodash';
 import {
   CombatAchievementTier,
   DiaryLocation,
@@ -47,6 +47,7 @@ import { getRankImageUrl } from '../../utils/get-rank-image-url';
 import { fetchPlayerDetails } from '../../data-sources/fetch-player-details/fetch-player-details';
 import { RankCalculatorSchema } from '../submit-rank-calculator-validation';
 import { stripEntityName } from '../../utils/strip-entity-name';
+import { approveSubmission } from '../../view/[submissionId]/utils/approve-submission';
 
 export const publishRankSubmissionAction = authActionClient
   .metadata({ actionName: 'publish-rank-submission' })
@@ -271,6 +272,13 @@ export const publishRankSubmissionAction = authActionClient
             : null,
       } satisfies RankSubmissionDiff;
 
+      const isAutoApprovalAvailable =
+        rankStructure === 'Standard' &&
+        hasTempleCollectionLog &&
+        hasWikiSyncData &&
+        hasTemplePlayerStats &&
+        isEmpty(pickBy(submissionDiff, (val) => !isEmpty(val)));
+
       const submissionTransaction = redis.multi();
 
       submissionTransaction.copy(
@@ -310,6 +318,20 @@ export const publishRankSubmissionAction = authActionClient
         return { success: false };
       }
 
+      if (isAutoApprovalAvailable) {
+        try {
+          await approveSubmission({
+            rank,
+            submissionId,
+            isAutomatic: true,
+          });
+        } catch (error) {
+          // If auto-approval fails, it can still be manually approved later,
+          // so we just log the error and continue.
+          Sentry.captureException(error);
+        }
+      }
+
       return { success: true };
     },
   );
diff --git a/apps/web/app/rank-calculator/[player]/page.tsx b/apps/web/app/rank-calculator/[player]/page.tsx
index f9464af8..35b7fee8 100644
--- a/apps/web/app/rank-calculator/[player]/page.tsx
+++ b/apps/web/app/rank-calculator/[player]/page.tsx
@@ -5,7 +5,6 @@ import {
   HydrationBoundary,
   QueryClient,
 } from '@tanstack/react-query';
-import { itemList } from '@/data/item-list';
 import { fetchPlayerDetails } from '../data-sources/fetch-player-details/fetch-player-details';
 import { FormWrapper } from './form-wrapper';
 import { saveDraftRankSubmissionAction } from './actions/save-draft-rank-submission-action';
@@ -37,7 +36,12 @@ export default async function RankCalculatorPage({
 
   const { id: userId } = session.user;
 
-  const playerDetails = await fetchPlayerDetails(decodedPlayer, userId);
+  const [playerDetails, dropRates] = await Promise.all([
+    fetchPlayerDetails(decodedPlayer, userId),
+    fetchItemDropRates([...generateRequiredItemList()]),
+  ]);
+
+  const notableItemList = await buildNotableItemList(dropRates);
 
   if (!playerDetails.success) {
     return <p>An error occurred</p>;
@@ -60,9 +64,6 @@ export default async function RankCalculatorPage({
 
   const queryClient = new QueryClient();
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
-  const notableItemList = await buildNotableItemList(itemList, dropRates);
-
   queryClient.setQueryData(['drop-rates'], dropRates);
   queryClient.setQueryData(['items'], Object.entries(notableItemList));
 
diff --git a/apps/web/app/rank-calculator/config/efficiency-rates.ts b/apps/web/app/rank-calculator/config/efficiency-rates.ts
index 3af3ab97..b12c3893 100644
--- a/apps/web/app/rank-calculator/config/efficiency-rates.ts
+++ b/apps/web/app/rank-calculator/config/efficiency-rates.ts
@@ -92,7 +92,7 @@ export const ehbRates = {
   Herbiboar: 60,
   'Lizardman shaman': 180, // Assuming cannoning in the Lizardman Canyon https://oldschool.runescape.wiki/w/Money_making_guide/Killing_Lizardman_Shamans_(Canyon)
   'LMS Points': 25,
-  'Master Clue': 1, // Probably wrong, needs to be calculated
+  'Master Clue': 1,
   'Medium Clue': 4.6, // Assuming an average of 180 implings caught per hour and 5 minutes spent per clue
   'Revenant ork': 150, // https://oldschool.runescape.wiki/w/Money_making_guide/Killing_revenants_(Craw%27s_bow)
   'Revenant ork#On-task': 150, // https://oldschool.runescape.wiki/w/Money_making_guide/Killing_revenants_(Craw%27s_bow)
@@ -104,6 +104,7 @@ export const ehbRates = {
   Kurask: 280,
   'Warped Terrorbird': 450,
   'Zombie Pirate Key': 21, // https://oldschool.runescape.wiki/w/Money_making_guide/Killing_zombie_pirates
+  'Mithril dragon': 72, // Assuming an average of a 5 minute task consisting of 6 kills
 } satisfies Record<string, number>;
 
 /**
diff --git a/apps/web/app/rank-calculator/config/item-point-map.ts b/apps/web/app/rank-calculator/config/item-point-map.ts
index 521b0527..f203e116 100644
--- a/apps/web/app/rank-calculator/config/item-point-map.ts
+++ b/apps/web/app/rank-calculator/config/item-point-map.ts
@@ -47,6 +47,7 @@ export const rewardItemBossNameMap: Record<string, keyof typeof ehbRates> = {
   'Barbarian Assault/Gambles#High': 'Barbarian Assault',
   'Grand Hallowed Coffin': 'Hallowed Sepulchre',
   "Zombie Pirate's Locker": 'Zombie Pirate Key',
+  'Chewed bones': 'Mithril dragon',
 };
 
 /**
@@ -74,6 +75,7 @@ export const collectionLogItemBossNameMap: Partial<
 export const dropRateModifiers: Record<string, number> = {
   Unsired: 1 / 100,
   'Ancient chest': 1 / 7.23,
+  'Chewed bones': 1 / 42.67,
 };
 
 /**
diff --git a/apps/web/app/rank-calculator/data-sources/fetch-dropped-item-info.ts b/apps/web/app/rank-calculator/data-sources/fetch-dropped-item-info.ts
index d3d902e7..96034703 100644
--- a/apps/web/app/rank-calculator/data-sources/fetch-dropped-item-info.ts
+++ b/apps/web/app/rank-calculator/data-sources/fetch-dropped-item-info.ts
@@ -21,12 +21,12 @@ export function generateRequiredItemList() {
 }
 
 export const fetchItemDropRates = unstable_cache(
-  async (items: Set<CollectionLogItemName>) => {
+  async (items: CollectionLogItemName[]) => {
     const batches = [];
     const batchSize = 10;
 
-    for (let i = 0; i < items.size; i += batchSize) {
-      const batch = [...items].slice(i, i + batchSize);
+    for (let i = 0; i < items.length; i += batchSize) {
+      const batch = items.slice(i, i + batchSize);
       const query = [
         `[[Dropped item::${[...batch].join('||')}]]`,
         '?Drop JSON',
diff --git a/apps/web/app/rank-calculator/data-sources/fetch-player-details/fetch-player-details.ts b/apps/web/app/rank-calculator/data-sources/fetch-player-details/fetch-player-details.ts
index 8d1e4975..fe5cbf52 100644
--- a/apps/web/app/rank-calculator/data-sources/fetch-player-details/fetch-player-details.ts
+++ b/apps/web/app/rank-calculator/data-sources/fetch-player-details/fetch-player-details.ts
@@ -137,11 +137,12 @@ export async function fetchPlayerDetails(
         )
       : undefined;
     const { joinDate, rsn, rank: currentRank } = playerRecord;
-    const [wikiSyncData, templePlayerStats, templeCollectionLog] =
+    const [wikiSyncData, templePlayerStats, templeCollectionLog, discordRoles] =
       await Promise.all([
         getWikiSyncData(player),
         fetchTemplePlayerStats(player, true),
         fetchTemplePlayerCollectionLog(player),
+        fetchUserDiscordRoles(userId),
       ]);
 
     const hasThirdPartyData = Boolean(
@@ -285,7 +286,6 @@ export async function fetchPlayerDetails(
 
     const hasMaxCape = totalLevel === maximumTotalLevel;
 
-    const discordRoles = await fetchUserDiscordRoles(userId);
     const {
       collectionLogBonusMultiplier,
       combatBonusMultiplier,
diff --git a/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-id-map.ts b/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-id-map.ts
index f1ae2daf..87550a3c 100644
--- a/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-id-map.ts
+++ b/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-id-map.ts
@@ -5,51 +5,58 @@ import {
   CombatAchievementListResponse,
 } from '@/app/schemas/wiki';
 import * as Sentry from '@sentry/nextjs';
-
-export async function getCaIdMap() {
-  const query = [
-    '[[Category:Easy Combat Achievements tasks||Medium Combat Achievements tasks||Hard Combat Achievements tasks||Elite Combat Achievements tasks||Master Combat Achievements tasks||Grandmaster Combat Achievements tasks]]',
-    '?Combat Achievement JSON',
-    'limit=1000',
-  ].join('|');
-
-  const params = new URLSearchParams({
-    action: 'ask',
-    format: 'json',
-    query,
-    api_version: '2',
-    formatversion: '2',
-  });
-
-  try {
-    const allCombatAchievementsResponse = await fetch(
-      `${clientConstants.wiki.baseUrl}/api.php?${params}`,
-    );
-
-    const data = CombatAchievementListResponse.parse(
-      await allCombatAchievementsResponse.json(),
-    );
-
-    return Object.values(data.query.results).reduce<Record<string, number>>(
-      (acc, val) => {
-        const [combatAchievementJson] =
-          val.printouts['Combat Achievement JSON'];
-
-        if (!combatAchievementJson) {
-          return acc;
-        }
-
-        const { id, tier } = CombatAchievementJson.parse(
-          JSON.parse(combatAchievementJson),
-        );
-
-        return { ...acc, [id]: combatAchievementTierPoints[tier] };
-      },
-      {},
-    );
-  } catch (error) {
-    Sentry.captureException(error);
-
-    return null;
-  }
-}
+import { unstable_cache } from 'next/cache';
+
+export const getCaIdMap = unstable_cache(
+  async () => {
+    const query = [
+      '[[Category:Easy Combat Achievements tasks||Medium Combat Achievements tasks||Hard Combat Achievements tasks||Elite Combat Achievements tasks||Master Combat Achievements tasks||Grandmaster Combat Achievements tasks]]',
+      '?Combat Achievement JSON',
+      'limit=1000',
+    ].join('|');
+
+    const params = new URLSearchParams({
+      action: 'ask',
+      format: 'json',
+      query,
+      api_version: '2',
+      formatversion: '2',
+    });
+
+    try {
+      const allCombatAchievementsResponse = await fetch(
+        `${clientConstants.wiki.baseUrl}/api.php?${params}`,
+      );
+
+      const data = CombatAchievementListResponse.parse(
+        await allCombatAchievementsResponse.json(),
+      );
+
+      return Object.values(data.query.results).reduce<Record<string, number>>(
+        (acc, val) => {
+          const [combatAchievementJson] =
+            val.printouts['Combat Achievement JSON'];
+
+          if (!combatAchievementJson) {
+            return acc;
+          }
+
+          const { id, tier } = CombatAchievementJson.parse(
+            JSON.parse(combatAchievementJson),
+          );
+
+          return { ...acc, [id]: combatAchievementTierPoints[tier] };
+        },
+        {},
+      );
+    } catch (error) {
+      Sentry.captureException(error);
+
+      return null;
+    }
+  },
+  [],
+  {
+    revalidate: 60 * 60 * 24 * 7, // 7 days
+  },
+);
diff --git a/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-tier-thresholds.ts b/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-tier-thresholds.ts
index 6ddbd296..5987f896 100644
--- a/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-tier-thresholds.ts
+++ b/apps/web/app/rank-calculator/data-sources/fetch-player-details/get-combat-achievement-tier-thresholds.ts
@@ -2,57 +2,64 @@ import { clientConstants } from '@/config/constants.client';
 import { CombatAchievementTier } from '@/app/schemas/osrs';
 import { CombatAchievementTierThresholdResponse } from '@/app/schemas/wiki';
 import * as Sentry from '@sentry/nextjs';
+import { unstable_cache } from 'next/cache';
 
-export async function getCombatAchievementTierThresholds(): Promise<Record<
-  Exclude<CombatAchievementTier, 'None'>,
-  number
-> | null> {
-  const query = [
-    '{{Globals|ca easy points}}',
-    '{{Globals|ca medium points}}',
-    '{{Globals|ca hard points}}',
-    '{{Globals|ca elite points}}',
-    '{{Globals|ca master points}}',
-    '{{Globals|ca gm points}}',
-  ].join('|');
+export const getCombatAchievementTierThresholds = unstable_cache(
+  async (): Promise<Record<
+    Exclude<CombatAchievementTier, 'None'>,
+    number
+  > | null> => {
+    const query = [
+      '{{Globals|ca easy points}}',
+      '{{Globals|ca medium points}}',
+      '{{Globals|ca hard points}}',
+      '{{Globals|ca elite points}}',
+      '{{Globals|ca master points}}',
+      '{{Globals|ca gm points}}',
+    ].join('|');
 
-  const tierPointThresholdParams = new URLSearchParams({
-    action: 'expandtemplates',
-    format: 'json',
-    text: query,
-    prop: 'wikitext',
-    formatversion: '2',
-  }).toString();
+    const tierPointThresholdParams = new URLSearchParams({
+      action: 'expandtemplates',
+      format: 'json',
+      text: query,
+      prop: 'wikitext',
+      formatversion: '2',
+    }).toString();
 
-  try {
-    const response = await fetch(
-      `${clientConstants.wiki.baseUrl}/api.php?${tierPointThresholdParams}`,
-    );
+    try {
+      const response = await fetch(
+        `${clientConstants.wiki.baseUrl}/api.php?${tierPointThresholdParams}`,
+      );
 
-    const data = CombatAchievementTierThresholdResponse.parse(
-      await response.json(),
-    );
+      const data = CombatAchievementTierThresholdResponse.parse(
+        await response.json(),
+      );
 
-    const [
-      easyPoints,
-      mediumPoints,
-      hardPoints,
-      elitePoints,
-      masterPoints,
-      gmPoints,
-    ] = data.expandtemplates.wikitext.split('|');
+      const [
+        easyPoints,
+        mediumPoints,
+        hardPoints,
+        elitePoints,
+        masterPoints,
+        gmPoints,
+      ] = data.expandtemplates.wikitext.split('|');
 
-    return {
-      Easy: Number(easyPoints),
-      Medium: Number(mediumPoints),
-      Hard: Number(hardPoints),
-      Elite: Number(elitePoints),
-      Master: Number(masterPoints),
-      Grandmaster: Number(gmPoints),
-    };
-  } catch (error) {
-    Sentry.captureException(error);
+      return {
+        Easy: Number(easyPoints),
+        Medium: Number(mediumPoints),
+        Hard: Number(hardPoints),
+        Elite: Number(elitePoints),
+        Master: Number(masterPoints),
+        Grandmaster: Number(gmPoints),
+      };
+    } catch (error) {
+      Sentry.captureException(error);
 
-    return null;
-  }
-}
+      return null;
+    }
+  },
+  [],
+  {
+    revalidate: 60 * 60 * 24 * 7, // 7 days
+  },
+);
diff --git a/apps/web/app/rank-calculator/hooks/use-drop-rates.ts b/apps/web/app/rank-calculator/hooks/use-drop-rates.ts
index 6cf37ba0..86cde94e 100644
--- a/apps/web/app/rank-calculator/hooks/use-drop-rates.ts
+++ b/apps/web/app/rank-calculator/hooks/use-drop-rates.ts
@@ -7,6 +7,6 @@ import {
 export function useDropRates() {
   return useSuspenseQuery({
     queryKey: ['drop-rates'],
-    queryFn: async () => fetchItemDropRates(generateRequiredItemList()),
+    queryFn: async () => fetchItemDropRates([...generateRequiredItemList()]),
   });
 }
diff --git a/apps/web/app/rank-calculator/hooks/use-get-items.ts b/apps/web/app/rank-calculator/hooks/use-get-items.ts
index f93bad21..8d9ca4bb 100644
--- a/apps/web/app/rank-calculator/hooks/use-get-items.ts
+++ b/apps/web/app/rank-calculator/hooks/use-get-items.ts
@@ -1,5 +1,4 @@
 import { useSuspenseQuery } from '@tanstack/react-query';
-import { itemList } from '@/data/item-list';
 import { useDropRates } from './use-drop-rates';
 import { buildNotableItemList } from '../utils/build-notable-item-list';
 
@@ -9,7 +8,7 @@ export function useGetItems() {
   return useSuspenseQuery({
     queryKey: ['items'],
     async queryFn() {
-      return Object.entries(await buildNotableItemList(itemList, dropRates));
+      return Object.entries(await buildNotableItemList(dropRates));
     },
   });
 }
diff --git a/apps/web/app/rank-calculator/utils/build-notable-item-list.ts b/apps/web/app/rank-calculator/utils/build-notable-item-list.ts
index a4e3c1bd..58c29641 100644
--- a/apps/web/app/rank-calculator/utils/build-notable-item-list.ts
+++ b/apps/web/app/rank-calculator/utils/build-notable-item-list.ts
@@ -13,44 +13,43 @@ import * as Sentry from '@sentry/nextjs';
 import { calculateItemPoints } from './calculate-item-points';
 import { pointsConfig } from '../config/points';
 
+const itemListChecksum = JSum.digest(itemList, 'SHA256', 'hex');
 const efficiencyDataChecksum = JSum.digest(efficiencyData, 'SHA256', 'hex');
 const itemPointMapChecksum = JSum.digest(itemPointMap, 'SHA256', 'hex');
 
 export const buildNotableItemList = unstable_cache(
   // eslint-disable-next-line @typescript-eslint/require-await
-  async (notableItemConfig: typeof itemList, dropRates: DroppedItemResponse) =>
-    Object.entries(notableItemConfig).reduce<ItemCategoryMap>(
-      (acc, [key, category]) => {
-        const items = category.items.map((item) => {
-          if (item.points) {
-            return item;
-          }
+  async (dropRates: DroppedItemResponse) =>
+    Object.entries(itemList).reduce<ItemCategoryMap>((acc, [key, category]) => {
+      const items = category.items.map((item) => {
+        if (item.points) {
+          return item;
+        }
 
-          if (isCollectionLogItem(item)) {
-            try {
-              return {
-                ...item,
-                points: calculateItemPoints(dropRates, item.requiredItems),
-              };
-            } catch (error) {
-              Sentry.captureException(error);
+        if (isCollectionLogItem(item)) {
+          try {
+            return {
+              ...item,
+              points: calculateItemPoints(dropRates, item.requiredItems),
+            };
+          } catch (error) {
+            Sentry.captureException(error);
 
-              return { ...item, hasPointsError: true };
-            }
+            return { ...item, hasPointsError: true };
           }
+        }
 
-          throw new Error(`Could not calculate item points for ${item.name}`);
-        }, []);
+        throw new Error(`Could not calculate item points for ${item.name}`);
+      }, []);
 
-        return {
-          ...acc,
-          [key]: { ...category, items: items as NonEmptyArray<Item> },
-        };
-      },
-      {},
-    ),
+      return {
+        ...acc,
+        [key]: { ...category, items: items as NonEmptyArray<Item> },
+      };
+    }, {}),
   [
     `points-per-hour:${pointsConfig.notableItemsPointsPerHour}`,
+    `item-list:${itemListChecksum}`,
     `efficiency-data:${efficiencyDataChecksum}`,
     `item-point-map:${itemPointMapChecksum}`,
   ],
diff --git a/apps/web/app/rank-calculator/utils/calculate-item-points.spec.ts b/apps/web/app/rank-calculator/utils/calculate-item-points.spec.ts
index 5da927c5..158194c8 100644
--- a/apps/web/app/rank-calculator/utils/calculate-item-points.spec.ts
+++ b/apps/web/app/rank-calculator/utils/calculate-item-points.spec.ts
@@ -359,7 +359,7 @@ it.each(testCases)(
     setup(itemSourcesTuple);
 
     const notableItems = generateRequiredItemList();
-    const dropRates = await fetchItemDropRates(notableItems);
+    const dropRates = await fetchItemDropRates([...notableItems]);
     const points = calculateItemPoints(
       dropRates,
       itemSources.map((itemSource) => ({
@@ -399,7 +399,7 @@ it('calculates the correct points when a specific drop source has been selected'
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
   const points = calculateItemPoints(dropRates, [
     { amount: 1, clogName: item, targetDropSources: ['Unsired'] },
   ]);
@@ -445,7 +445,7 @@ it('calculates the correct points for items consisting of multiple drops', async
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
 
   const points = calculateItemPoints(dropRates, [
     { amount: 1, clogName: 'Bludgeon axon', targetDropSources: ['Unsired'] },
@@ -490,7 +490,7 @@ it('calculates points for items dropped from multiple sources by finding the mea
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
 
   const points = calculateItemPoints(dropRates, [
     { amount: 1, clogName: 'Virtus robe top' },
@@ -515,7 +515,7 @@ it('divides the total points by the amount of rolls per drop', async () => {
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
   const points = calculateItemPoints(dropRates, [
     { amount: 1, clogName: 'Granite hammer' },
   ]);
@@ -539,7 +539,7 @@ it('does not modify the drop rate if "ignoreDropRateModifier" is true', async ()
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
   const points = calculateItemPoints(dropRates, [
     { amount: 1, clogName: 'Thread of elidinis', ignoreDropRateModifier: true },
   ]);
@@ -563,7 +563,7 @@ it('does not multiply the points by amount of items if "ignoreAmountMultiplier"
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
   const points = calculateItemPoints(dropRates, [
     { amount: 2, clogName: 'Zenyte shard', ignoreAmountMultiplier: true },
   ]);
@@ -587,7 +587,7 @@ it('multiplies the points by amount of items if "amount" is greater than 1 and "
     ],
   ]);
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
   const points = calculateItemPoints(dropRates, [
     { amount: 2, clogName: 'Zenyte shard' },
   ]);
diff --git a/apps/web/app/rank-calculator/view/[submissionId]/approve-submission-action.ts b/apps/web/app/rank-calculator/view/[submissionId]/approve-submission-action.ts
index 77a8092e..4dbfb772 100644
--- a/apps/web/app/rank-calculator/view/[submissionId]/approve-submission-action.ts
+++ b/apps/web/app/rank-calculator/view/[submissionId]/approve-submission-action.ts
@@ -1,32 +1,10 @@
 'use server';
 
 import { authActionClient } from '@/app/safe-action';
-import { discordBotClient } from '@/discord';
-import { Routes } from 'discord-api-types/v10';
-import { serverConstants } from '@/config/constants.server';
-import { redis, redisRaw } from '@/redis';
 import { ActionError } from '@/app/action-error';
-import {
-  RankStructure,
-  RankSubmissionDiff,
-  RankSubmissionStatus,
-} from '@/app/schemas/rank-calculator';
-import {
-  rankSubmissionDiffKey,
-  rankSubmissionKey,
-  rankSubmissionMetadataKey,
-  userOSRSAccountsKey,
-} from '@/config/redis';
-import { Player } from '@/app/schemas/player';
-import { CombatAchievementTier } from '@/app/schemas/osrs';
-import { achievementDiscordRoles } from '@/config/discord-roles';
-import dedent from 'dedent';
 import { userCanModerateSubmission } from './utils/user-can-moderate-submission';
 import { ApproveSubmissionSchema } from './moderate-submission-schema';
-import { sendDiscordMessage } from '../../utils/send-discord-message';
-import { getRankName } from '../../utils/get-rank-name';
-import { assignRankDiscordRole } from './utils/assign-rank-discord-role';
-import { assignAchievementDiscordRoles } from './utils/assign-achievement-discord-roles';
+import { approveSubmission } from './utils/approve-submission';
 
 export const approveSubmissionAction = authActionClient
   .metadata({ actionName: 'approve-submission' })
@@ -42,174 +20,10 @@ export const approveSubmissionAction = authActionClient
         );
       }
 
-      const metadata = (await redisRaw.hmget(
-        rankSubmissionMetadataKey(submissionId),
-        'status',
-        'discordMessageId',
-        'submittedBy',
-        'hasWikiSyncData',
-      )) as unknown as [RankSubmissionStatus, string, string, string];
-
-      if (!metadata) {
-        throw new ActionError('Unable to find submission metadata');
-      }
-
-      const [submissionStatus, messageId, submitterId, hasWikiSyncData] =
-        metadata;
-
-      if (submissionStatus !== 'Pending') {
-        throw new ActionError('Submission does not need to be moderated!');
-      }
-
-      const submissionData = await redis.json.get<{
-        '$.playerName': [string];
-        '$.rankStructure': [RankStructure];
-        '$.combatAchievementTier': [CombatAchievementTier];
-        '$.hasBloodTorva': [boolean];
-      }>(
-        rankSubmissionKey(submissionId),
-        '$.rankStructure',
-        '$.playerName',
-        '$.combatAchievementTier',
-        '$.hasBloodTorva',
-      );
-
-      if (!submissionData) {
-        throw new ActionError('Unable to find submission data for application');
-      }
-
-      const {
-        '$.playerName': [playerName],
-        '$.rankStructure': [rankStructure],
-        '$.combatAchievementTier': [combatAchievementTier],
-        '$.hasBloodTorva': [isBloodTorvaChecked],
-      } = submissionData;
-
-      const submissionDiff = await redis.hmget<
-        Pick<RankSubmissionDiff, 'combatAchievementTier' | 'hasBloodTorva'>
-      >(
-        rankSubmissionDiffKey(submissionId),
-        'combatAchievementTier',
-        'hasBloodTorva',
-      );
-
-      if (!submissionDiff) {
-        throw new ActionError('Unable to find submission diff for application');
-      }
-
-      const {
-        combatAchievementTier: combatAchievementTierDiscrepancy,
-        hasBloodTorva: hasBloodTorvaDiscrepancy,
-      } = submissionDiff;
-
-      // If the player has WikiSync data available and has the Grandmaster CA tier,
-      // they can be assigned the Grandmaster role.
-      const isVerifiedGrandmaster =
-        hasWikiSyncData === 'true' &&
-        combatAchievementTier === 'Grandmaster' &&
-        !combatAchievementTierDiscrepancy;
-
-      // If the player has WikiSync data available and has the Ancient blood ornament kit,
-      // they can be assigned the Blood Torva role.
-      // This item is based on multiple combat achievements that are available via WikiSync.
-      const hasVerifiedAncientBloodOrnamentKit =
-        hasWikiSyncData === 'true' &&
-        isBloodTorvaChecked &&
-        !hasBloodTorvaDiscrepancy;
-
-      const applicableAchievementDiscordRoles = {
-        'Blood Torva': hasVerifiedAncientBloodOrnamentKit,
-        Grandmaster: isVerifiedGrandmaster,
-      } satisfies Record<keyof typeof achievementDiscordRoles, boolean>;
-
-      const requiresAchievementRoles = Object.values(
-        applicableAchievementDiscordRoles,
-      ).some(Boolean);
-
-      if (rankStructure === 'Standard') {
-        await discordBotClient.put(
-          Routes.channelMessageOwnReaction(
-            serverConstants.discord.channelId,
-            messageId,
-            encodeURIComponent('☑️'),
-          ),
-        );
-        await assignRankDiscordRole(rank, submitterId);
-
-        const newAchievementRoles = requiresAchievementRoles
-          ? await assignAchievementDiscordRoles(
-              submitterId,
-              applicableAchievementDiscordRoles,
-            )
-          : [];
-
-        await sendDiscordMessage(
-          {
-            content: dedent`
-              <@${submitterId}>
-
-              Your application has been approved by <@${approverId}> and you have been assigned the following role(s) on Discord:
-              
-              ${[getRankName(rank), ...newAchievementRoles.filter(Boolean)]
-                .map((role) => `- ${role}`)
-                .join('\n')}
-
-              Please reach out to any member of staff to update your in-game rank!
-            `,
-          },
-          messageId,
-        );
-      } else {
-        if (requiresAchievementRoles) {
-          await assignAchievementDiscordRoles(
-            submitterId,
-            applicableAchievementDiscordRoles,
-          );
-        }
-
-        await sendDiscordMessage(
-          {
-            content: dedent`
-              <@${submitterId}>
-
-              Your application has been approved by <@${approverId}>.
-
-              Please reach out to a mod or key to update your ranks!
-            `,
-          },
-          messageId,
-        );
-      }
-
-      const playerRecord = (await redis.hget(
-        userOSRSAccountsKey(submitterId),
-        playerName.toLowerCase(),
-      ))!;
-
-      if (!playerRecord) {
-        throw new ActionError('Unable to find player record!');
-      }
-
-      const transaction = redis.multi();
-
-      transaction.hset<string>(rankSubmissionMetadataKey(submissionId), {
-        status: 'Approved',
-        actionedBy: approverId,
+      return approveSubmission({
+        submissionId,
+        rank,
+        approverId,
       });
-
-      transaction.hset<Omit<Player, 'joinDate' | 'rsn' | 'isMobileOnly'>>(
-        userOSRSAccountsKey(submitterId),
-        {
-          [playerName.toLowerCase()]: { ...playerRecord, rank },
-        },
-      );
-
-      const result = await transaction.exec();
-
-      if (!result) {
-        throw new ActionError('Unable to persist approval to database');
-      }
-
-      return { success: true };
     },
   );
diff --git a/apps/web/app/rank-calculator/view/[submissionId]/get-discord-username.ts b/apps/web/app/rank-calculator/view/[submissionId]/get-discord-username.ts
index 92656e07..100670bb 100644
--- a/apps/web/app/rank-calculator/view/[submissionId]/get-discord-username.ts
+++ b/apps/web/app/rank-calculator/view/[submissionId]/get-discord-username.ts
@@ -7,6 +7,10 @@ export async function getDiscordUsername(userId: string | null) {
     return null;
   }
 
+  if (isNaN(Number(userId))) {
+    return 'System';
+  }
+
   const data = (await discordBotClient.get(
     Routes.guildMember(serverConstants.discord.guildId, userId),
   )) as APIGuildMember;
diff --git a/apps/web/app/rank-calculator/view/[submissionId]/page.tsx b/apps/web/app/rank-calculator/view/[submissionId]/page.tsx
index a4ca7265..56386a40 100644
--- a/apps/web/app/rank-calculator/view/[submissionId]/page.tsx
+++ b/apps/web/app/rank-calculator/view/[submissionId]/page.tsx
@@ -15,7 +15,6 @@ import {
   HydrationBoundary,
   QueryClient,
 } from '@tanstack/react-query';
-import { itemList } from '@/data/item-list';
 import { ReadonlyFormWrapper } from './readonly-form-wrapper';
 import { RankCalculatorSchema } from '../../[player]/submit-rank-calculator-validation';
 import { calculateDiffErrors } from './utils/calculate-diff-errors';
@@ -68,8 +67,8 @@ export default async function ViewSubmissionPage({
 
   const queryClient = new QueryClient();
 
-  const dropRates = await fetchItemDropRates(generateRequiredItemList());
-  const notableItemList = await buildNotableItemList(itemList, dropRates);
+  const dropRates = await fetchItemDropRates([...generateRequiredItemList()]);
+  const notableItemList = await buildNotableItemList(dropRates);
 
   queryClient.setQueryData(['drop-rates'], dropRates);
   queryClient.setQueryData(['items'], Object.entries(notableItemList));
diff --git a/apps/web/app/rank-calculator/view/[submissionId]/readonly-form-wrapper.tsx b/apps/web/app/rank-calculator/view/[submissionId]/readonly-form-wrapper.tsx
index 5c0deca6..9aa867ab 100644
--- a/apps/web/app/rank-calculator/view/[submissionId]/readonly-form-wrapper.tsx
+++ b/apps/web/app/rank-calculator/view/[submissionId]/readonly-form-wrapper.tsx
@@ -40,7 +40,7 @@ export function ReadonlyFormWrapper({
 
   const methods = useForm<Omit<RankCalculatorSchema, 'rank' | 'points'>>({
     disabled: true,
-    values: formData,
+    defaultValues: formData,
     errors: isModerator ? diffErrors : {},
   });
 
diff --git a/apps/web/app/rank-calculator/view/[submissionId]/utils/approve-submission.ts b/apps/web/app/rank-calculator/view/[submissionId]/utils/approve-submission.ts
new file mode 100644
index 00000000..58ee81cd
--- /dev/null
+++ b/apps/web/app/rank-calculator/view/[submissionId]/utils/approve-submission.ts
@@ -0,0 +1,231 @@
+'use server';
+
+import { ActionError } from '@/app/action-error';
+import type { CombatAchievementTier } from '@/app/schemas/osrs';
+import type {
+  RankStructure,
+  RankSubmissionDiff,
+  RankSubmissionStatus,
+} from '@/app/schemas/rank-calculator';
+import { serverConstants } from '@/config/constants.server';
+import type { achievementDiscordRoles } from '@/config/discord-roles';
+import {
+  rankSubmissionDiffKey,
+  rankSubmissionKey,
+  rankSubmissionMetadataKey,
+  userOSRSAccountsKey,
+} from '@/config/redis';
+import { discordBotClient } from '@/discord';
+import { redis, redisRaw } from '@/redis';
+import { Routes } from 'discord-api-types/v10';
+import { assignRankDiscordRole } from './assign-rank-discord-role';
+import { assignAchievementDiscordRoles } from './assign-achievement-discord-roles';
+import { sendDiscordMessage } from '@/app/rank-calculator/utils/send-discord-message';
+import dedent from 'dedent';
+import { getRankName } from '@/app/rank-calculator/utils/get-rank-name';
+import type { Player } from '@/app/schemas/player';
+import type { Rank } from '@/config/enums';
+import * as Sentry from '@sentry/node';
+
+type ApproveSubmissionInput = {
+  submissionId: string;
+  rank: Rank;
+} & (
+  | {
+      approverId: string;
+      isAutomatic?: false;
+    }
+  | {
+      approverId?: never;
+      isAutomatic: true;
+    }
+);
+
+export async function approveSubmission({
+  submissionId,
+  rank,
+  approverId,
+  isAutomatic = false,
+}: ApproveSubmissionInput) {
+  const metadata = (await redisRaw.hmget(
+    rankSubmissionMetadataKey(submissionId),
+    'status',
+    'discordMessageId',
+    'submittedBy',
+    'hasWikiSyncData',
+  )) as unknown as [RankSubmissionStatus, string, string, string];
+
+  if (!metadata) {
+    throw new ActionError('Unable to find submission metadata');
+  }
+
+  const [submissionStatus, messageId, submitterId, hasWikiSyncData] = metadata;
+
+  if (submissionStatus !== 'Pending') {
+    throw new ActionError('Submission does not need to be moderated!');
+  }
+
+  const submissionData = await redis.json.get<{
+    '$.playerName': [string];
+    '$.rankStructure': [RankStructure];
+    '$.combatAchievementTier': [CombatAchievementTier];
+    '$.hasBloodTorva': [boolean];
+  }>(
+    rankSubmissionKey(submissionId),
+    '$.rankStructure',
+    '$.playerName',
+    '$.combatAchievementTier',
+    '$.hasBloodTorva',
+  );
+
+  if (!submissionData) {
+    throw new ActionError('Unable to find submission data for application');
+  }
+
+  const {
+    '$.playerName': [playerName],
+    '$.rankStructure': [rankStructure],
+    '$.combatAchievementTier': [combatAchievementTier],
+    '$.hasBloodTorva': [isBloodTorvaChecked],
+  } = submissionData;
+
+  const submissionDiff = await redis.hmget<
+    Pick<RankSubmissionDiff, 'combatAchievementTier' | 'hasBloodTorva'>
+  >(
+    rankSubmissionDiffKey(submissionId),
+    'combatAchievementTier',
+    'hasBloodTorva',
+  );
+
+  if (!submissionDiff) {
+    throw new ActionError('Unable to find submission diff for application');
+  }
+
+  const {
+    combatAchievementTier: combatAchievementTierDiscrepancy,
+    hasBloodTorva: hasBloodTorvaDiscrepancy,
+  } = submissionDiff;
+
+  // If the player has WikiSync data available and has the Grandmaster CA tier,
+  // they can be assigned the Grandmaster role.
+  const isVerifiedGrandmaster =
+    hasWikiSyncData === 'true' &&
+    combatAchievementTier === 'Grandmaster' &&
+    !combatAchievementTierDiscrepancy;
+
+  // If the player has WikiSync data available and has the Ancient blood ornament kit,
+  // they can be assigned the Blood Torva role.
+  // This item is based on multiple combat achievements that are available via WikiSync.
+  const hasVerifiedAncientBloodOrnamentKit =
+    hasWikiSyncData === 'true' &&
+    isBloodTorvaChecked &&
+    !hasBloodTorvaDiscrepancy;
+
+  const applicableAchievementDiscordRoles = {
+    'Blood Torva': hasVerifiedAncientBloodOrnamentKit,
+    Grandmaster: isVerifiedGrandmaster,
+  } satisfies Record<keyof typeof achievementDiscordRoles, boolean>;
+
+  const requiresAchievementRoles = Object.values(
+    applicableAchievementDiscordRoles,
+  ).some(Boolean);
+
+  if (rankStructure === 'Standard') {
+    await discordBotClient.put(
+      Routes.channelMessageOwnReaction(
+        serverConstants.discord.channelId,
+        messageId,
+        encodeURIComponent('☑️'),
+      ),
+    );
+    await assignRankDiscordRole(rank, submitterId);
+
+    const newAchievementRoles = requiresAchievementRoles
+      ? await assignAchievementDiscordRoles(
+          submitterId,
+          applicableAchievementDiscordRoles,
+        )
+      : [];
+
+    await sendDiscordMessage(
+      {
+        content: dedent`
+          <@${submitterId}>
+
+          Your application has been ${
+            isAutomatic
+              ? 'automatically approved'
+              : `approved by <@${approverId}>`
+          } and you have been assigned the following role(s) on Discord:
+          
+          ${[getRankName(rank), ...newAchievementRoles.filter(Boolean)]
+            .map((role) => `- ${role}`)
+            .join('\n')}
+
+          Please reach out to any member of staff to update your in-game rank!
+        `,
+      },
+      messageId,
+    );
+  } else {
+    if (requiresAchievementRoles) {
+      await assignAchievementDiscordRoles(
+        submitterId,
+        applicableAchievementDiscordRoles,
+      );
+    }
+
+    await sendDiscordMessage(
+      {
+        content: dedent`
+          <@${submitterId}>
+
+          Your application has been approved by <@${approverId}>.
+
+          Please reach out to a mod or key to update your ranks!
+        `,
+      },
+      messageId,
+    );
+  }
+
+  const playerRecord = (await redis.hget(
+    userOSRSAccountsKey(submitterId),
+    playerName.toLowerCase(),
+  ))!;
+
+  if (!playerRecord) {
+    throw new ActionError('Unable to find player record!');
+  }
+
+  const transaction = redis.multi();
+
+  const actionedBy = isAutomatic ? 'System' : approverId;
+
+  if (!actionedBy) {
+    Sentry.captureException('Unable to determine actionedBy for approval');
+
+    throw new ActionError('Something went wrong while approving submission');
+  }
+
+  transaction.hset<string>(rankSubmissionMetadataKey(submissionId), {
+    status: 'Approved',
+    actionedBy,
+    automaticApproval: isAutomatic ? 'true' : 'false',
+  });
+
+  transaction.hset<Omit<Player, 'joinDate' | 'rsn' | 'isMobileOnly'>>(
+    userOSRSAccountsKey(submitterId),
+    {
+      [playerName.toLowerCase()]: { ...playerRecord, rank },
+    },
+  );
+
+  const result = await transaction.exec();
+
+  if (!result) {
+    throw new ActionError('Unable to persist approval to database');
+  }
+
+  return { success: true };
+}
diff --git a/apps/web/app/schemas/rank-calculator.ts b/apps/web/app/schemas/rank-calculator.ts
index fdf20ab3..5c0a32d9 100644
--- a/apps/web/app/schemas/rank-calculator.ts
+++ b/apps/web/app/schemas/rank-calculator.ts
@@ -46,6 +46,7 @@ export const RankSubmissionMetadata = z.object({
   hasTempleCollectionLog: z.boolean(),
   isTempleCollectionLogOutdated: z.boolean(),
   hasWikiSyncData: z.boolean(),
+  automaticApproval: z.boolean().optional(),
 });
 
 export type RankSubmissionMetadata = z.infer<typeof RankSubmissionMetadata>;
diff --git a/apps/web/data/item-categories/miscellaneous.ts b/apps/web/data/item-categories/miscellaneous.ts
index 73804d39..62dee4fc 100644
--- a/apps/web/data/item-categories/miscellaneous.ts
+++ b/apps/web/data/item-categories/miscellaneous.ts
@@ -52,6 +52,11 @@ export const miscellaneous: ItemCategory = {
       name: 'Dragon warhammer',
       collectionLogCategory: 'miscellaneous',
     }),
+    singleItem({
+      name: 'Dragon full helm',
+      collectionLogCategory: 'miscellaneous',
+      targetDropSources: ['Chewed bones'],
+    }),
     compoundItem({
       name: 'Graceful set',
       points: calculateXpOrTimeBasedItemPoints(
